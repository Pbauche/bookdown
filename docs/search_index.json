[
["index.html", "Handout_V2 Chapter 1 Information 1.1 Usefull ressource 1.2 todo 1.3 interesting stuff 1.4 Hint", " Handout_V2 Pierre Bauche 2018-09-22 Chapter 1 Information 1.1 Usefull ressource Feature engenering : http://www.feat.engineering/review-predictive-modeling-process.html Semi supervized learning : https://www.analyticsvidhya.com/blog/2017/09/pseudo-labelling-semi-supervised-learning-technique/ - Machine Learning wth unlabbeled data : psuedo labeling Book Artificial Intelligence: A Modern Approach&quot; by Stuart Russell and Peter Norvig. 1.2 todo create Blogdown tydiverse package Tensorflow for deep learning : open source software library developed at google for complex computation 1.3 interesting stuff polynomial regression using kernel smoothing Logistic regression using 5 fold stratified cross validation blockchain data science reinforcement learning adversarial training -Deep Learning microsoft service Tensorflow : read exemple RKWard : free and open source Graphical User Interface for the R software ML with H2O, lime, Keras spark R image recognizing with R sentiment analysis = microsoft azure data privacy data quality control Web developpement Shiny : (microsoft azure serveur pour upload Rmarckodw : blogdown (Hugo) Insurance fraud underwriting models : predict somebody’s insurance risk marketing predition customer segmentation 1.4 Hint "],
["feature-engeneering.html", "Chapter 2 Feature engeneering 2.1 Input feature 2.2 Missing Value 2.3 Outlier Detection 2.4 Sampling and resampling 2.5 variables selections 2.6 Example 2.7 Method Summary 2.8 tips", " Chapter 2 Feature engeneering 2.1 Input feature A feature is a numeric representation of raw data. Feature engineering is the process of formulating the most appropriate features given the data, the model, and the task. If features are’t good enought then model canot be good. Features selection is important. If they are to many fearture, model use noise or irrelevant information or redundant. IF they are not enought feature, model don’t have the information . Create new input : Combine feature reduire dimention reduire colinéarité predictor qui ont du sens use the input interaction kmeans clustering as feature : attetion pas inclure la target risque overfitting a data point can also be represented by a dense vector of its inverse distance to each cluster center. This retains more information than simple binary cluster assignment n-day average (in time series) : peut reduire la variabilite etle noise ratio Tips Use knowledge to construct a better set of features (business) Visualizing the correlation and check de relation between input and output when output is numeric between different input Normalize the feature if metrics differt or unknow 2.1.1 Numeric Data Predictors that are on a continuous scale are subject to somes issues that can be mitigated through the choose of model. Models that are smooth functions of input features or model hat use euclidian distance (regression, clustering, …) are sensitive to the scale. Models based on space-partitioning trees (decision trees, gradient boosted machines, random forests) are not sensitive to scale. There are a variety of modifications that can be made to an individual predictor that might improve its utility in a model. scaling : not change the shape of the distribution \\(/frac{x-min(x)}{max(x)-min(x)}\\) Feature scaling is useful in situations where a set of input features differs wildly in scale. standardization on N(0,1) : \\(/frac{x-mean(x)}{sqrt(var())}\\) essential when the distance or dot products between predictors are used (such as K-nearest neighbors or support vector machines) essential when the variables are required to be a a common scale in order to apply a penalty (e.g. the lasso or ridge regression) normalisation : divide by the euclienne l² norme (=sums the squares of the values of the features across data points). SO the feature column has norm = 1 Discretization : fixed width quantile binning Variables scaled and standardized are comparable Some models need gaussian input : scale + transform Power transforms : variance-stabilizing transformations** Power transforms change the distribution of the variable to more symetric distribution log sqrt inverse boxcox : generalisation : Only work for positive variable johnson transform logit transformations : This transformation changes the scale from zero and one to values between negative and positive infinity 2.1.2 count data Raw counts that span several orders of magnitude are problematic for many models.In a linear model, the same linear coefficient would have to work for all possible values of the count. Large counts could also wreak havoc in unsupervised learning methods such as k-means clustering, which uses Euclidean distance as a similarity function to measure the similarity between data points. A large count in one element of the data vector would outweigh the similarity in all other elements, which could throw off the entire similarity measurement. count transform binarise 0/1 if value quantizing the count or group the counts fixed-width binning, each bin contains a specific numeric range (ex age) If count have multiple magnitudes, group by powers of 10 ( 0–9, 10–99, 100–999, 1000–9999, etc) Quantile binning : adaptively positioning the bins based on the distribution of the data log transform 2.1.3 categorical data Use Dummy or keep factors with somes levels is same for most modeling. It suggest using the predictors without converting to dummy variables and, if the model appears promising, to also try refitting using dummy variables. unordered categorical data dummy coding : in Feature engineering, il recommande de flag chaque variable categorielle en varible binaire effect coding : -1 0 1 : -1 si different de categorie de reference. Effect coding is very similar to dummy coding, but results in linear regression models that are even simpler to interpret. Dealing with Large Categorical Variables do nothing dummy : create many variable with zero value for rare categories and add zero-variance predictor( computentional intencive ) delete rare value recode and regroup categorical data Compress the features. There are two choices: Feature hashing, popular with linear models. A hash function is a deterministic function that maps a potentially unbounded integer to a finite integer range [1, m]. Feature hashing compresses the original feature vector into an m-dimensional vector. It Converte large cat var into small hash feature (but hashing feature are uninterpretable) Bin counting, popular with linear models as well as trees. Rather than using the value of the categorical variable as the feature, use the conditional probability of the target under that value. In other words, instead of encoding the identity of the categorical value, we compute the association statistics between that value and the target that we wish to predict Ordered data how measure de force to pass between each categorie ? linear quadratic 2.1.4 Date Time : Lubridate package Use as.POSIXct() and UTC (universal coordinated time)in time zone. create new variables : weekend (0/1), bankholiday (0/1), … 2.2 Missing Value Do nothing remove impute by mean : doesn’t impact analysis by singular value decomposition : approximate true value by regression :approximate true value Check lien 5 methode impute missing value 2.3 Outlier Detection 2.4 Sampling and resampling Modern statistical methods assume that the underlying data comes from a random distribution. The performance measurements of models derived from data are also subject to random noise. the sample can be generalized for the population with statistical confidence. Is an approximatation. Weak law of large numbers : \\(\\bar{X_n} =&gt; \\mu\\) Central limit theorem : distribution standardis? tend vers une normale asymptotiquement model sampling : population data is already collected and you want to reduce time and the computational cost of analysis, along with improve the inference of your models survey sampling : create a sample design and then survey the population only to collect sample to save data collection costs. Type of sampling methods : Boostrap sampling : sampling with replacement Jackknife = leave one out sampling + calculate average of the estimation Vfold crossvalidation : Resampling methods that can generate V different versions of the training set (same size) that can be used to evaluate model on test set. Each of the V assessment sets contains 1/V of the training set and each of these exclude different data points. Suppose V = 10, then there are 10 different versions of 90% of the data and also 10 versions of the remaining 10% for each corresponding resample. in the end, there are V estimates of performance for the model and each was calculated on a different assessment set. The cross-validation estimate of performance is computed by averaging the V individual metrics. Monte Carlo : Produces splits that are likely to contain overlap. For each resample, a random sample is taken with π proportion of the training set going into the analysis set and the remaining samples allocated to the assessment set bootstrap : A bootstrap resample of the data is defined to be a simple random sample that is the same size as the training set where the data are sampled with replacement 2.5 variables selections How do we cleanly separate the signal from the noise? First Filter Na filter : column with to many NA Variance filter : Column with not enought variance to explain dataset corrélation filter : e will remove predictors that are highly correlated (r2 &gt; 0.9) with other predictors. see corrplot Variance treshold : Variable with high variability also have higher information in them. We remove all variables havant variance less than a treshold. 2.5.1 Filter methods : Select variables sans modélisation. Methode univariée. Order feature by importance. Methode robust contre overfitting mais peut selectionner variables redondantes. It is best to do prefiltering conservatively, so as not to inadvertently eliminate useful features before they even make it to the model training step Chi square test Correlation coefficients information gain metrics fisher score variance treshold 2.5.2 Wrapper Methods: Test differentes combinaisons de feature selon crit?re de performance. Predictive model is used to evaluate the set of feature by accurancy metric. Méthode efficace pour la mod?lisation. Peut causé de l’overfitting. forward/backward selection recursive feature elimation algorithm … see supervised analysis 2.5.3 Embedded Methods : Next step to wrapper methods. Introduce a penalty factor to the evaluation criteria of the model to bias the model toward lower complexity. Balance between complexity and accurancy. Less computationally expensive than Wrapper. Less prone to overfitting. These methods perform feature selection as part of the model training process Lasso Ridge regression … Decision tree Gradiant descent methods 2.5.4 Dimension reduction : See unsuppervized section PCA see unsupervised analysis : Due to the orthogonality constraint in the objective function, PCA transformation produces a nice side effect: the transformed features are no longer correlated. svd k-means as a featurization procedure, a data point can be represented by its cluster membership 2.6 Example 2.6.1 Credit risk modeling Feature ranking Fit logistic model Calculate Gini coefficient rearrange variables ? combine, weighted sums, etc Need to understand variable individually ? use Filtering method data dirty ? detect outlier Data selection? use first ranking, forward selection and last Embedded method. Compare with crit?rion (misclassi, MSE, AIC, etc) improve performance? bootstrap : subsample your data et redo analysis ### Data Prep ### ################# library(MLmetrics) data = get(load(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/LoanDefaultPred.RData&quot;)) #Create the default variable data[,&quot;default&quot;]=ifelse(data$loss ==0, 0,1) print(table(data$default)*100/nrow(data)) ## ## 0 1 ## 90.635 9.365 # Without prior kwowledge : if more than 30 variable is continuous continuous &lt;-character() categorical &lt;-character() i = names(data)[1] p&lt;-1 q&lt;-1 for (i in names(data)){ unique_levels =length(unique(data[,i])) if(i %in% c(&quot;id&quot;,&quot;loss&quot;,&quot;default&quot;)){ next; }else if (unique_levels &lt;=30 |is.character(data[,i])){ categorical[p] &lt;-i p=p+1 data[[i]] &lt;-factor(data[[i]]) }else{ continuous[q] &lt;-i q=q+1 }} cat(&quot;\\nTotal number of continuous variables in feature set &quot;,length(continuous) -1) ## ## Total number of continuous variables in feature set 714 cat(&quot;\\nTotal number of categorical variable in feature set &quot;,length(categorical) -2) ## ## Total number of categorical variable in feature set 52 # Gini coef performance_metric_gini &lt;-data.frame(feature =character(), Gini_value =numeric()) # for (feature in names(data)){ # if(feature %in%c(&quot;id&quot;,&quot;loss&quot;,&quot;default&quot;)) { # next # } else { # tryCatch( # {glm_model &lt;-glm(default ~get(feature),data=data,family=binomial(link=&quot;logit&quot;)); # predicted_values &lt;-predict.glm(glm_model,newdata=data,type=&quot;response&quot;); # Gini_value &lt;-Gini(predicted_values,data$default); # performance_metric_gini &lt;-rbind(performance_metric_gini,cbind(feature,Gini_value));},error=function(e){}) # } # } # # saveRDS(performance_metric_gini, &quot;performance_metric_gini.rds&quot;) performance_metric_gini &lt;- readRDS(&quot;./save/performance_metric_gini.rds&quot;) performance_metric_gini$Gini_value &lt;-as.numeric(as.character(performance_metric_gini$Gini_value)) Ranked_Features &lt;-performance_metric_gini[order(-performance_metric_gini$Gini_value),] head(Ranked_Features) ## feature Gini_value ## 389 f404 0.2579189 ## 710 f766 0.2578312 ## 585 f630 0.2415352 ## 584 f629 0.2354368 ## 321 f333 0.2352707 ## 56 f64 0.2348747 # Note : When you are running loops over large datasets, it is possible that the loop might stop due to some errors. to escape that, consider using the trycatch() function in r ################################################### ### Try logistic regression with top 5 features ### ################################################### glm_model &lt;-glm(default ~f766 +f404 +f629 +f630 +f281 +f322,data=data,family=binomial(link=&quot;logit&quot;)) predicted_values &lt;-predict.glm(glm_model,newdata=data,type=&quot;response&quot;) Gini_value &lt;-Gini(predicted_values,data$default) summary(glm_model) ## ## Call: ## glm(formula = default ~ f766 + f404 + f629 + f630 + f281 + f322, ## family = binomial(link = &quot;logit&quot;), data = data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.6928 -0.4946 -0.4102 -0.3329 3.0013 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.502550 4.939282 -0.304 0.7610 ## f766 -0.010228 4.916519 -0.002 0.9983 ## f404 -1.395602 4.908606 -0.284 0.7762 ## f629 -0.306456 0.172632 -1.775 0.0759 . ## f630 -0.165047 0.128300 -1.286 0.1983 ## f281 0.007759 0.019386 0.400 0.6890 ## f322 0.264196 0.128472 2.056 0.0397 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 12415 on 19938 degrees of freedom ## Residual deviance: 12040 on 19932 degrees of freedom ## (61 observations deleted due to missingness) ## AIC: 12054 ## ## Number of Fisher Scoring iterations: 5 Gini_value ## [1] 0.2697868 # Every features aren&#39;t always significant. Indication that features themselves are highly correlated. Gini coef has not improved. So investigate multicorrelation. # Variable ranking method is univariate and lead to the selection of a redundant variables. top_6_feature &lt;-data.frame(data$f766,data$f404,data$f629,data$f630,data$f281,data$f322) cor(top_6_feature, use=&quot;complete&quot;) ## data.f766 data.f404 data.f629 data.f630 data.f281 ## data.f766 1.0000000 0.9996754 0.6777553 0.6378040 0.8205665 ## data.f404 0.9996754 1.0000000 0.6774434 0.6374457 0.8204153 ## data.f629 0.6777553 0.6774434 1.0000000 0.9155376 0.6628148 ## data.f630 0.6378040 0.6374457 0.9155376 1.0000000 0.6202698 ## data.f281 0.8205665 0.8204153 0.6628148 0.6202698 1.0000000 ## data.f322 -0.7706228 -0.7707861 -0.5450001 -0.5048133 -0.7371242 ## data.f322 ## data.f766 -0.7706228 ## data.f404 -0.7707861 ## data.f629 -0.5450001 ## data.f630 -0.5048133 ## data.f281 -0.7371242 ## data.f322 1.0000000 2.6.2 variance treshold approach # Attention, les variables ne sont pas standardisées, on ne peut pas les comparer directement. On utilise le coeficient de variation :$c= \\fraq{\\sigma}{\\mu}$ # Calculate CV coefficient_of_variance &lt;-data.frame(feature =character(), cov =numeric()) for (feature in names(data)){ if(feature %in%c(&quot;id&quot;,&quot;loss&quot;,&quot;default&quot;)){next }else if(feature %in% continuous){ tryCatch({ cov &lt;-abs(sd(data[[feature]], na.rm =TRUE)/mean(data[[feature]],na.rm =TRUE)); if(cov !=Inf){ coefficient_of_variance &lt;-rbind(coefficient_of_variance,cbind(feature, cov)); } else {next} },error=function(e){}) }else{next} } coefficient_of_variance$cov &lt;-as.numeric(as.character(coefficient_of_variance$cov)) Ranked_Features_cov &lt;-coefficient_of_variance[order(-coefficient_of_variance$cov),] head(Ranked_Features_cov) ## feature cov ## 294 f338 128.05980 ## 377 f422 111.93083 ## 664 f724 69.64913 ## 349 f393 55.39446 ## 712 f775 47.64456 ## 350 f394 46.68719 ## Logistic model glm_model &lt;-glm(default ~f338 +f422 +f724 +f636 +f775 +f723,data=data, family=binomial(link=&quot;logit&quot;)); predicted_values &lt;-predict.glm(glm_model,newdata=data,type=&quot;response&quot;) Gini_value &lt;-Gini(predicted_values,data$default) cat(&quot;The Gini Coefficient for the fitted model is &quot;,Gini_value); ## The Gini Coefficient for the fitted model is 0.1465253 Contrairement au Ranking avec Gini, les variables ne sont pas dominés par leur structure de correlation. Mais les variables ne sont pas toutes significatives individuellement et le coef GINI pas particuliérement amélioré. Avec variance treshlod on espére selectionné des variables indépendantes 2.7 Method Summary Variable quanti Variable quali Graph Time series, barplot, boxplot, histographe, QQplot, scaterplot barplot, boxplot Test t-test sur la moyenne, chi2 sur la variance, test normalité, corrélation, test F variance, test de levene test proportion, test ajustement, test indépendance Modélisation Régression linéaire régression logistique, analyse discriminante, abre décision Parametric : assume thaht sample data is drawn from a known probabilité distribution based on fixed set of parameters. For instance, linear regression assumes normal distribution, whereas logistic assumes binomial distribution, etc. This assumption allows the methods to be applied to small datasets as well. involve a two-step model-based approach : Chose model (ex : linear) and estimate (ex: ols) reduce the probleme of model estimation to a probleme of parameter estimation but if the chosen model is too far from the true f, then the estimate will be poor Non parametric : not assume any probabilty distribution or prior. Contruct empirical distributions from data. (= Kernel regression, NPMR) Models can also be evaluated in terms of variance and bias. A model has high variance if small changes to the underlying data used to estimate the parameters cause a sizable change in those parameters (or in the structure of the model) Model bias reflects the ability of a model to conform to the underlying theoretical structure of the data. A low bias model is one that can be highly flexible and has the capacity to fit a variety of different shapes and patterns. A high bias model would be unable to estimate values close to their true theoretical counterparts. Linear methods often have high bias since, without modification, cannot describe nonlinear patterns in the predictor variables. Tree-based models, support vector machines, neural networks, and others can be very adaptable to the data and have low bias. 2.8 tips Tidyverse package Given below are some of the rare feature engineering tricks implemented in the winning solutions of several data science competitions. - Transform data to Image - Meta-leaks - Representation learning features Mean encodings - Transforming target variable "],
["data-visualization.html", "Chapter 3 Data visualization 3.1 Descriptive 3.2 Spacial map", " Chapter 3 Data visualization 3.1 Descriptive #change theme =&gt; + theme() iris %&gt;% qplot(Petal.Width, Petal.Length , color = Species, data = .) cars %&gt;% ggplot(aes(x = speed, y = ..count..)) + geom_histogram(bins = 10) + geom_density() cars %&gt;% ggplot(aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = &quot;lm&quot;) # If non linear smooth : method = &#39;loess&#39; Multiple line longley %&gt;% ggplot(aes(x = Year)) + geom_point(aes(y = Unemployed)) + geom_point(aes(y = Armed.Forces), color = &quot;blue&quot;) + geom_line(aes(y = Unemployed)) + geom_line(aes(y = Armed.Forces), color = &quot;blue&quot;) Scaling cars %&gt;% ggplot(aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + scale_x_reverse(&quot;Speed&quot;) + scale_y_continuous(&quot;Stopping Distance&quot;) iris %&gt;% ggplot(aes(x = Species, y = Petal.Length)) + geom_boxplot() + geom_jitter(width = 0.1, height = 0.1) + scale_x_discrete(labels = c(&quot;setosa&quot; = &quot;Setosa&quot;, &quot;versicolor&quot; = &quot;Versicolor&quot;, &quot;virginica&quot; = &quot;Virginica&quot;)) Correlation plot Pearson correlation : relation lin?aire \\[\\rho(X,Y)=\\frac{E[(X-\\mu_X)(Y-\\mu_Y)]}{\\sigma_X \\sigma_Y} \\] library(corrplot) correlation_world &lt;-read.csv(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 4/Correlation/Correlation Data.csv&quot;) corrplot(cor(correlation_world[,2:6],method =&quot;pearson&quot;),diag =FALSE, title =&quot;Correlation Plot&quot;, method =&quot;ellipse&quot;, tl.cex =0.7, tl.col =&quot;black&quot;, cl.ratio =0.2 ) 3.2 Spacial map Static map qmap from ggplot Esay way : Machine learning with R, chap4 Interactive map : leaflet More information on https://rstudio.github.io/leaflet for more complex cartographie, check geoJSON https://rstudio.github.io/leaflet/json.html gps geolocalisation : https://github.com/AugustT/shiny_geolocation library(leaflet) lat = seq(50, 51 ,by= 0.005) lon = seq(4,5, by=0.005) coords &lt;- as.data.frame(cbind(Longitude = sample(lon,50), Latitude = sample(lat,50))) coords$V3 = as.factor(rep(&quot;Amandine&quot;,50)) coords$V4 = rep(seq(1,5,by=1),10) # simple use # Possibilité d&#39;utilise d&#39;autre map que google open street map m &lt;- leaflet() %&gt;% setView(lng = 4.8, lat = 50.5, zoom = 10) m %&gt;% addProviderTiles(providers$Stamen.Toner) m %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) # cartographe library(maps) mapStates = map(&quot;state&quot;, fill = TRUE, plot = FALSE) leaflet(data = mapStates) %&gt;% addTiles() %&gt;% addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) # modifier les markeret pop up leaflet(coords) %&gt;% addTiles() %&gt;% addMarkers(clusterOptions = markerClusterOptions(), popup = coords$V4) leaflet(coords) %&gt;% addTiles() %&gt;% addCircles(lng = ~Longitude, lat = ~Latitude, weight = 1, radius = ~V4^2 * 30, popup = ~V3 ) # rectangle zone leaflet() %&gt;% addTiles() %&gt;% addRectangles( lng1=-118.456554, lat1=34.078039, lng2=-118.436383, lat2=34.062717, fillColor = &quot;transparent&quot; ) "],
["regression.html", "Chapter 4 Regression 4.1 introduction 4.2 Linear regression 4.3 ANOVA 4.4 Polynomiale regression 4.5 Logistique 4.6 Generalized Linear Models 4.7 Model Selection 4.8 Regularization Algorithms 4.9 Locally estimated Scaterplot Smoothing (LOESS)", " Chapter 4 Regression load(&quot;./save/BreastCancer.Rdata&quot;) #import Data_Purchase_Prediction &lt;-read.csv(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 6/PurchasePredictionDataset.csv&quot;,header=TRUE) library(IDPmisc) library(Metrics) library(MASS) library(&quot;lattice&quot;) library(car) 4.1 introduction First supervized learning. Supervised learning means we have the (X,Y) and we need to get the function that maps X to Y. Dependante variable is available and regression use others predictives variables to estimate regression coefficient. 4.2 Linear regression Model : \\(Y=\\alpha + X \\beta + \\epsilon\\) Linéaire: on suppose distribition normal \\(\\alpha\\) :intercepte : la reponse moyenne si les variables explicatives sont zéro Remarque Categorical data : set to as factor Check Missing value : delete, impute, new catégorie Hypothèses : \\(rang(X) = p\\) =&gt; Rang est connu, exclus la multicolinéarité X est une matrice déterminée \\(\\epsilon\\) sont des erreurs indépendantes \\(E(\\epsilon) = 0\\) =&gt; erreur de moyenne nulle (normalité des résidus) \\(var(\\epsilon) = \\sigma_2 In\\) =&gt; variance Homoskédastique non autocorrélé Estimation et propriétés des estimateurs : Estimation par moindres carrés ordinaires : Minimise les squares error. Estimateur le plus efficace dans la classe des estimateurs non biaisé :BLUE \\(E[Y] = X \\beta\\) \\(Var(Y) = \\sigma In\\) \\(E[\\hat(\\beta)] = \\beta\\) \\(var(\\hat(\\beta)) = \\sigma (X&#39;X)^(-1)\\) Si \\(\\epsilon ~ N(0, \\sigma In)\\), alors \\(\\hat(\\beta) ~ N(\\beta, \\sigma^2 (X&#39;X)^(-1))\\) \\[SSTO = SSR + SSE\\] \\[\\sum{(Y_i - \\bar{Y})^2} = \\sum{(\\hat{Y}_i - \\bar{Y})^2} + \\sum{(Y_i - \\hat{Y})^2}\\] Diagnostiques : F-test : \\(H_0 : \\beta_i = 0 \\forall i\\) stat de test : \\(\\frac{(SSTO - SSE)/(p-1)}{SSE/(n-p)} = \\frac{MSR}{MSE} \\sim F(p-1,n-1)\\) coefficient de détermination multiple \\(R^2\\) : mesure de qualité d’ajustement \\(\\frac{SSR/SSTO}\\) Multicolinéarité : forte corrélation entre variables explicatives Conséquence : Interprétation des coéfficients impossibles Diagnostiques : variance des coefficients très larges, coefficients varient beaucoup a l’ajouts/retrait de variables, coefficients ont signes non intruitifs Calcule des VIF (variance inflation factor) : si mpoyenne des VIF &gt; 1 ou un VIF &gt;10) \\(tolérance = 1-R²\\) et \\(VIF = \\frac{1}{tolérance}\\) Solution : Supprimer des variables, regression de Ridge (permet l’inversion de la matrice X’X qui est impossible en cas de multicolinéarité parfaite) Linéarité : Graph des résidus Vs régresseurs Si forme connue : transformer les regressieurs (log, sqrt) ou ajouté un terme (quadratique, log, d’interaction, …) Homoskédasticité : graph résidus vs valeurs prédites, test de Breush et Pagan, BreushPAgan, Berlett test, arch test Variance des erreurs indépendante des variable explicative Estimation reste correcte sous homoskédasticité : utilisé une variance corrigé : Régression de white Erreur Non indépendante : test d’autocorrélation Dubin watson test, plot acf If résidual show definite relationship with prior résidual (like autocorrelation), the noise isn’t random and we still have some information that we can extract and put in the model Problème de modèle : passer en log lin, oubli de régresseur (qui est autocorrélé), inclure des lag de la variable dépendante Normalité des erreurs : QQplot, test de Jarque Berra, KS test estimation correcte mais interprétation des tests et des IC sont faussées car basé sur la normalité théorie des grand nombre, si assez observations, estimateur OLS est assymptiquement normal et les test et IC tendent assymptotiquement Influential Point Analysis: Les valeurs abérantes peuvent crée des biais dans les estimateurs. Si trop extreme, on peut les deletes, check, impute, … DFFITS DFBETAS Distance de Cooks : \\[ D_i = \\frac{e²_i}{s²p} [\\frac{h_i}{(1-h_i)²}]\\] where \\(s²= (n-p)^{-1}e^Te\\) est la moyenne des erreurs quadratiques de la regression. Et \\(h_i =x^T(x^Tx)^{-1}\\). Avec cutoff \\(D_i &gt; 4/(n-k-1)\\) ou k est le nombre de paramètre Distance de Cook mesure l’effet of deleting a given observation. Si supprimer des observations cause grosse influence, alors ce point est suppiser etre outlier. Evaluation : RMSE = sqrt(mean($residuals)^2) ou $residuals = actual-predicted Interprétation : Pour une augmentation de une unité de speed, dist augmente de 3.9324. Intercepte donne la dist si speed vaut zero reglin = lm(dist~ speed, data=cars) summary(reglin) ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.069 -9.525 -2.272 9.215 43.201 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -17.5791 6.7584 -2.601 0.0123 * ## speed 3.9324 0.4155 9.464 1.49e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.38 on 48 degrees of freedom ## Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 ## F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 y = cars$dist x = cars$speed res &lt;-stack(data.frame(Observed = y, Predicted=fitted(reglin))) res &lt;-cbind(res, x =rep(x, 2)) #Plot using lattice xyplot(function) library(&quot;lattice&quot;) xyplot(values ~x, data = res, group = ind, auto.key =TRUE) sqrt(mean(residuals(reglin)^2)) ## [1] 15.06886 rmse(cars$dist,predict(reglin)) ## [1] 15.06886 # Normalité des résidus sresid = studres(reglin) sresid=NaRV.omit(sresid) hist(sresid, freq=FALSE, main=&quot;Distribution of Studentized Residuals&quot;,breaks=25) xfit&lt;-seq(min(sresid),max(sresid),length=40) yfit&lt;-dnorm(xfit) lines(xfit, yfit) ## ADD QQplot ## test normalité (attention juste indicateur) ks.test(reglin$residuals,pnorm,alternative=&quot;two.sided&quot;) ## ## One-sample Kolmogorov-Smirnov test ## ## data: reglin$residuals ## D = 0.49833, p-value = 3.283e-11 ## alternative hypothesis: two-sided shapiro.test(reglin$residuals) ## ## Shapiro-Wilk normality test ## ## data: reglin$residuals ## W = 0.94509, p-value = 0.02152 # Multicolinnéarité : VIF # vif(reglin) # residual autocorrelation : H0 = pas d&#39;autocorrélation durbinWatsonTest(reglin) ## lag Autocorrelation D-W Statistic p-value ## 1 0.1604322 1.676225 0.19 ## Alternative hypothesis: rho != 0 plot(acf(reglin$residuals)) # Homoskédasticité : breush pagan test # h0 : variance hétéscedastic ncvTest(reglin) ## Non-constant Variance Score Test ## Variance formula: ~ fitted.values ## Chisquare = 4.650233 Df = 1 p = 0.03104933 #plot resi vs fit : detect non liearité, heterocedasticity, outlier # if random = ok plot(reglin$residuals,reglin$fitted.values) # cook&#39;s distance cutoff &lt;-4/((nrow(cars)-length(reglin$coefficients)-1)) plot(reglin, which=4, cook.levels=cutoff) # taille du cercle proportionnel a la distance de cook influencePlot(reglin, id.method=&quot;identify&quot;,main=&quot;Influence Plot&quot;, sub=&quot;Circle size is proportional to Cook&#39;s Distance&quot;, id.location=NULL) outlierTest(reglin) ## ## No Studentized residuals with Bonferonni p &lt; 0.05 ## Largest |rstudent|: ## rstudent unadjusted p-value Bonferonni p ## 49 3.184993 0.0025707 0.12853 # now investigate vs mean of data variable 4.3 ANOVA 4.4 Polynomiale regression Si la relation entre variables explicatives et variable dépendante n’est pas linéaire. Possibilité d’augmenter la relation dans des haut degré polynomials mais will cause overfitting. \\[ y_i = \\alpha_0 + \\alpha_i x_i + \\alpha_2 x²_i+ ... + \\epsilon_i\\] Exemple : Dependant variable = price of a commodity Explicative variable = quantiée vendue The general principle is if the price is too cheap, people will not buy the commodity thinking it’s not of good quality, but if the price is too high, people will not buy due to cost consideration. Let’s try to quantify this relationship using linear and quadratic regression y &lt;-as.numeric(c(&quot;3.3&quot;,&quot;2.8&quot;,&quot;2.9&quot;,&quot;2.3&quot;,&quot;2.6&quot;,&quot;2.1&quot;,&quot;2.5&quot;,&quot;2.9&quot;,&quot;2.4&quot;,&quot;3.0&quot;,&quot;3.1&quot;,&quot;2.8&quot;,&quot;3.3&quot;,&quot;3.5&quot;,&quot;3&quot;)) x&lt;-as.numeric(c(&quot;50&quot;,&quot;55&quot;,&quot;49&quot;,&quot;68&quot;,&quot;73&quot;,&quot;71&quot;,&quot;80&quot;,&quot;84&quot;,&quot;79&quot;,&quot;92&quot;,&quot;91&quot;,&quot;90&quot;,&quot;110&quot;,&quot;103&quot;,&quot;99&quot;)); linear_reg &lt;-lm(y~x) summary(linear_reg) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.66844 -0.25994 0.03346 0.20895 0.69004 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.232652 0.445995 5.006 0.00024 *** ## x 0.007546 0.005463 1.381 0.19046 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3836 on 13 degrees of freedom ## Multiple R-squared: 0.128, Adjusted R-squared: 0.06091 ## F-statistic: 1.908 on 1 and 13 DF, p-value: 0.1905 plot(y) lines(linear_reg$fitted.values) quad_reg &lt;-lm(y~x +I(x^2) ) summary(quad_reg) ## ## Call: ## lm(formula = y ~ x + I(x^2)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.43380 -0.13005 0.00493 0.20701 0.33776 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.8737010 1.1648621 5.901 7.24e-05 *** ## x -0.1189525 0.0309061 -3.849 0.00232 ** ## I(x^2) 0.0008145 0.0001976 4.122 0.00142 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2569 on 12 degrees of freedom ## Multiple R-squared: 0.6391, Adjusted R-squared: 0.5789 ## F-statistic: 10.62 on 2 and 12 DF, p-value: 0.002211 plot(y) lines(quad_reg$fitted.values) # improvement in R square, quadratic term significant 4.5 Logistique 4.5.1 General Variable dépendante binaire : binomially distribued binomial distribution probability mass function : \\(f(k;n,p) = P(X=k) = \\left( \\begin{array}{c} n \\\\ k \\end{array} \\right) p^k (1-p)^{n-k}\\) Trois classe de modèle logistiques: binomial logistic regression : var dépendante soit 0 soit 1 multinomial logistic regression : 3 ouplus niveu pour la variable dépendante (on utilise ditribution multinomiale) ordered logistic regression Transformation logit : fonction de lien pour la regression : \\(logit = \\frac{e^t}{e^t+1}=\\frac{1}{1+e^{-t}}\\) LA cote : représente la relation entre presence/absence d’un event odd = P(A)/(1-P(A)) un odd de 2 pour un event A mean l’event est deux fois plus probable qu’il se réalise que rien ne se réalise. Odd Ratio : rapport des cotes = Odd(A) / Odd(B) SI OR = 2 : Chanque que B se réalise sont deux fois suppérieur a celle de A 4.5.2 Binomial Logistic MODEL Model : \\[ logit(p_i) = \\ln(\\frac{p_i}{1-p_i}) = \\beta_0 + \\beta X \\] Hypothèses : Estimation par MLE ou itérative avec optimisation du logLoss Diagnostiques : Si but est classification : check les predictions et classement Si but est analyse des coefficients : vérification des hypothèsese stat Wald test : same a t-test in reg lin. Test sur les levels des variables sont individuellements significatifs. Suit une distri chi-square. pseudo R-square : Mesure la proportion de variance expliqué par le modele. Mesure la différence entre la déviance un model null et fitted. Calcul par le likelihood ratio : \\[R²_i = \\frac{D_{null} - D_{fitted}}{D_{null}}\\] ou D est la déviance : $ D = - 2ln $ Bivariate plot : observed and predictied vs variable explicative. Plot donne info sur comme le model sur comporte selon les différent niveau Matrice de classification : - Spécificity = combien de negatif le model prédit correctement - sensitivity = combien de positif le model prédit correctement library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 3.3.3 library(mlbench) ## Warning: package &#39;mlbench&#39; was built under R version 3.3.3 BreastCancer$Cl.thickness = as.numeric(as.character(BreastCancer$Cl.thickness)) BreastCancer$IsMalignant = ifelse( BreastCancer$Class== &quot;benign&quot;, 0, 1) ggplot(data =BreastCancer, aes(x = Cl.thickness, y = IsMalignant)) + geom_jitter(height = 0.05, width = 0.3, alpha=0.4) + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;binomial&quot;)) reglog = glm(IsMalignant ~ Cl.thickness, family = &quot;binomial&quot;, data = BreastCancer) summary(reglog) ## ## Call: ## glm(formula = IsMalignant ~ Cl.thickness, family = &quot;binomial&quot;, ## data = BreastCancer) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.1986 -0.4261 -0.1704 0.1730 2.9118 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -5.16017 0.37795 -13.65 &lt;2e-16 *** ## Cl.thickness 0.93546 0.07377 12.68 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 900.53 on 698 degrees of freedom ## Residual deviance: 464.05 on 697 degrees of freedom ## AIC: 468.05 ## ## Number of Fisher Scoring iterations: 6 table(BreastCancer$Class, ifelse(predict(reglog, BreastCancer) &lt; 0.5, 0, 1)) ## ## 0 1 ## benign 453 5 ## malignant 94 147 4.5.3 Multinomial Logistic Regression Variable dépendante a plus de une catégorie et suit une distribution multinomiale. On fait une regression logistic pour chaque classe et combine dans un seul equation sous contrainte que la somme des probabilités vallent 1. Estimation par iterative optimization of the LogLoss function. But : clairement de la classification. Deux méthode possible : Pick de highest probability : classe dans la classe qui a le plus haute probabilité par rapport au autres classe. Méthode soufre de la “Class imbalance probleme” (si les classes sont non equilibré, tendance à toujours assigner dans la plus grande classe) Ratio of probabilities : prendre la ratio des probabilité prédite et la prior distribution and choisir la classe basé sur le plus haut ratio. Cette méthode normalise les probabilité par le ratio du prior pour réduire le biais liéà la distribution du pior Data_Purchase&lt;-na.omit(Data_Purchase_Prediction) rownames(Data_Purchase)&lt;-NULL #Random Sample for easy computation Data_Purchase_Model&lt;-Data_Purchase[sample(nrow(Data_Purchase),10000),] # prior distribution table(Data_Purchase_Model$ProductChoice) ## ## 1 2 3 4 ## 2186 3903 2936 975 # multinomial model library(nnet) mnl_model &lt;-multinom (ProductChoice ~MembershipPoints +IncomeClass + CustomerPropensity +LastPurchaseDuration +CustomerAge +MartialStatus, data = Data_Purchase) ## # weights: 44 (30 variable) ## initial value 672765.880864 ## iter 10 value 615285.850873 ## iter 20 value 607471.781374 ## iter 30 value 607231.472034 ## final value 604217.503433 ## converged mnl_model ## Call: ## multinom(formula = ProductChoice ~ MembershipPoints + IncomeClass + ## CustomerPropensity + LastPurchaseDuration + CustomerAge + ## MartialStatus, data = Data_Purchase) ## ## Coefficients: ## (Intercept) MembershipPoints IncomeClass CustomerPropensityLow ## 2 0.77137077 -0.02940732 0.00127305 -0.3960318 ## 3 0.01775506 0.03340207 0.03540194 -0.8573716 ## 4 -1.15109893 -0.12366367 0.09016678 -0.6427954 ## CustomerPropensityMedium CustomerPropensityUnknown ## 2 -0.2745419 -0.5715016 ## 3 -0.4038433 -1.1824810 ## 4 -0.4035627 -0.9769569 ## CustomerPropensityVeryHigh LastPurchaseDuration CustomerAge ## 2 0.2553831 0.04117902 0.001638976 ## 3 0.5645137 0.05539173 0.005042405 ## 4 0.5897717 0.07047770 0.009664668 ## MartialStatus ## 2 -0.033879645 ## 3 -0.007461956 ## 4 0.122011042 ## ## Residual Deviance: 1208435 ## AIC: 1208495 # Modele converge en 30itérations. #Predict the probabilities predicted_test &lt;-as.data.frame(predict(mnl_model, newdata = Data_Purchase, type=&quot;probs&quot;)) ## méthode 1 : the prediction based in highest probability test_result &lt;-apply(predicted_test,1,which.max) result &lt;-as.data.frame(cbind(Data_Purchase$ProductChoice,test_result)) colnames(result) &lt;-c(&quot;Actual Class&quot;, &quot;Predicted Class&quot;) table(result$`Actual Class`,result$`Predicted Class`) ## ## 1 2 3 ## 1 302 91952 12365 ## 2 248 150429 38028 ## 3 170 90944 51390 ## 4 27 32645 16798 # bon résultat pour classe 123 mais pour classe 4 pas un seul case de classé. ## Methode 2 : normalisation avec la ditribution du prior prior &lt;-table(Data_Purchase_Model$ProductChoice)/nrow(Data_Purchase_Model) prior_mat &lt;-rep(prior,nrow(Data_Purchase_Model)) pred_ratio &lt;-predicted_test/prior_mat test_result &lt;-apply(pred_ratio,1,which.max) result &lt;-as.data.frame(cbind(Data_Purchase$ProductChoice,test_result)) colnames(result) &lt;-c(&quot;Actual Class&quot;, &quot;Predicted Class&quot;) table(result$`Actual Class`,result$`Predicted Class`) ## ## 1 2 3 4 ## 1 22444 62943 19204 28 ## 2 29614 110375 48633 83 ## 3 14668 76304 51467 65 ## 4 4871 27609 16940 50 4.6 Generalized Linear Models Pour GLM, on suppose que la variable dépendante est issue de la famille de ditribution exponentielle incluant la normal, binomial, poisson, gamma, … etc. \\[ E(Y) = \\mu = g^{-1}(X\\beta) \\] In R : glm(formula, family=familytype(link=linkfunction), data=) - binomial, (link = “logit”) : modele logistique - gaussian, (link= “identity”) : modèle linéaire - Gamma, (link= “inverse”) : analyse de survie (time to failure of a machine in the industry) - poisson, (link = “log”) : How many calls will the call center receive today? 4.7 Model Selection - **Stepwise** : ajoute séquentielement la variables la plus significative. Après chaqeu ajout,le modèle réévalue la significativité des autres variables. Step : Model with 1 best feature, add next variables that maximise the evaluation function, ... Proc?dure tr?s lourde. parfois necessaire d&#39;utiliser FIlter m?thod avant. ### Data prep ### ################# ## Data with best feature from Filter method data = get(load(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/LoanDefaultPred.RData&quot;)) data[,&quot;default&quot;]=ifelse(data$loss ==0, 0,1) data_model &lt;-na.omit(data[,c(&quot;id&quot;,&quot;f338&quot;,&quot;f422&quot;,&quot;f724&quot;,&quot;f636&quot;,&quot;f775&quot;,&quot;f222&quot;,&quot;f93&quot;,&quot;f309&quot;,&quot;f303&quot;,&quot;f113&quot;,&quot;default&quot;),]) ### Forward ### ############### full_model &lt;-glm(default ~f338 +f422 +f724 +f636 +f775 +f222 +f93 +f309+f303 +f113,data=data_model,family=binomial(link=&quot;logit&quot;)) null_model &lt;-glm(default ~1 ,data=data_model,family=binomial(link=&quot;logit&quot;)) forwards &lt;-step(null_model,scope=list(lower=formula(null_model),upper=formula(full_model)), direction=&quot;forward&quot;) ## Start: AIC=11175.3 ## default ~ 1 ## ## Df Deviance AIC ## + f422 1 11136 11140 ## + f113 1 11150 11154 ## + f222 1 11150 11154 ## + f775 1 11165 11169 ## + f93 1 11168 11172 ## + f309 1 11171 11175 ## + f303 1 11171 11175 ## &lt;none&gt; 11173 11175 ## + f636 1 11172 11176 ## + f338 1 11173 11177 ## + f724 1 11173 11177 ## ## Step: AIC=11140.24 ## default ~ f422 ## ## Df Deviance AIC ## + f113 1 11113 11119 ## + f222 1 11114 11120 ## + f775 1 11129 11135 ## + f93 1 11131 11137 ## &lt;none&gt; 11136 11140 ## + f303 1 11135 11141 ## + f309 1 11135 11141 ## + f636 1 11135 11141 ## + f338 1 11136 11142 ## + f724 1 11136 11142 ## ## Step: AIC=11118.59 ## default ~ f422 + f113 ## ## Df Deviance AIC ## + f222 1 11096 11104 ## + f775 1 11106 11114 ## &lt;none&gt; 11113 11119 ## + f93 1 11111 11119 ## + f303 1 11112 11120 ## + f636 1 11112 11120 ## + f309 1 11112 11120 ## + f338 1 11112 11120 ## + f724 1 11113 11121 ## ## Step: AIC=11103.78 ## default ~ f422 + f113 + f222 ## ## Df Deviance AIC ## + f775 1 11090 11100 ## &lt;none&gt; 11096 11104 ## + f303 1 11095 11105 ## + f636 1 11095 11105 ## + f309 1 11095 11105 ## + f93 1 11095 11105 ## + f338 1 11096 11106 ## + f724 1 11096 11106 ## ## Step: AIC=11099.57 ## default ~ f422 + f113 + f222 + f775 ## ## Df Deviance AIC ## + f303 1 11087 11099 ## &lt;none&gt; 11090 11100 ## + f309 1 11088 11100 ## + f636 1 11089 11101 ## + f93 1 11089 11101 ## + f338 1 11090 11102 ## + f724 1 11090 11102 ## ## Step: AIC=11098.6 ## default ~ f422 + f113 + f222 + f775 + f303 ## ## Df Deviance AIC ## &lt;none&gt; 11087 11099 ## + f636 1 11086 11100 ## + f93 1 11086 11100 ## + f309 1 11086 11100 ## + f338 1 11086 11100 ## + f724 1 11087 11101 #best model with AIC criteria formula(forwards) ## default ~ f422 + f113 + f222 + f775 + f303 4.8 Regularization Algorithms 4.8.1 Ridge regression 4.8.2 Least Absolute Shrinkage and Selection Opérator LASSO 4.8.3 Elastic Net 4.8.4 Leas-Angle Regression LARS - **Lasso** dd penalty term against the complexity to reduce the degree of overfittingor the variance of the model by adding additional bas. Check formul LASSO Objective function for the penalized logistic regression: $ - [1/N y (_0 + x^T_t ) - (1 + ) ] + lambda[(1-)||||^2_2 ]$ library(&quot;glmnet&quot;) ### Data prep ### ################# data = get(load(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/LoanDefaultPred.RData&quot;)) data[,&quot;default&quot;]=ifelse(data$loss ==0, 0,1) data_model &lt;-na.omit(data) y &lt;-as.matrix(data_model$default) # x &lt;-as.matrix(subset(data_model, select=continuous[250:260])) x &lt;-as.matrix(data_model[,250:260]) fit =glmnet(x,y, family=&quot;binomial&quot;) summary(fit) ## Length Class Mode ## a0 52 -none- numeric ## beta 572 dgCMatrix S4 ## df 52 -none- numeric ## dim 2 -none- numeric ## lambda 52 -none- numeric ## dev.ratio 52 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## classnames 2 -none- character ## call 4 -none- call ## nobs 1 -none- numeric plot (fit, xvar=&quot;dev&quot;, label=TRUE) #Fit a cross validated binomial model fit_logistic =cv.glmnet(x,y, family=&quot;binomial&quot;, type.measure=&quot;class&quot;) plot (fit_logistic) # on est sens? voir un tendance dans les points rouge. on veut le labda qui minimum le taux de mauvaise classifications print(fit_logistic$lambda.min) ## [1] 0.01919422 param &lt;-coef(fit_logistic, s=&quot;lambda.min&quot;) param &lt;-as.data.frame(as.matrix(param)) param$feature&lt;-rownames(param) #The list of variables suggested by the embedded method param_embeded &lt;-param[param[,2]&gt;0,] param_embeded ## 1 feature ## f251 0 f251 ## f252 0 f252 ## f253 0 f253 ## f254 0 f254 ## f255 0 f255 ## f256 0 f256 ## f257 0 f257 ## f258 0 f258 ## f259 0 f259 ## f260 0 f260 ## f261 0 f261 ridge 4.9 Locally estimated Scaterplot Smoothing (LOESS) "],
["unsupervised.html", "Chapter 5 Unsupervised 5.1 Dimensionality reduction algorithms 5.2 Cluster analysis 5.3 Evaluation of clustering 5.4 Association Rule Mining Algorithms 5.5 Singular Value decomposition 5.6 K-Nearest Neighbot 5.7 Others unsuppervised algorithms", " Chapter 5 Unsupervised Pas de variable dépendante, découverte des données 5.1 Dimensionality reduction algorithms PCA L’objectif est de réduire la dimension des données pour obtenir une meilleur visualisation. PCA is a transformation of the data but don’t add or delete any information. Only numerical data, if factors : transforme en vecteur numérique sinon use FDA Hughes phenomeon : With a fixed number of training samples, the predictive power reduces as the dimensionality increases. But réduire la variabilité d’un dataset. On crée de nouvelles variables orthogonales qui explique le plus possible de variances des variables. basé sur la matrice des covariances pca &lt;- prcomp(subset(iris, select = -Species)) pca ## Standard deviations: ## [1] 2.0562689 0.4926162 0.2796596 0.1543862 ## ## Rotation: ## PC1 PC2 PC3 PC4 ## Sepal.Length 0.36138659 -0.65658877 0.58202985 0.3154872 ## Sepal.Width -0.08452251 -0.73016143 -0.59791083 -0.3197231 ## Petal.Length 0.85667061 0.17337266 -0.07623608 -0.4798390 ## Petal.Width 0.35828920 0.07548102 -0.54583143 0.7536574 plot(pca) mapped_iris &lt;- as.data.frame(predict(pca, iris)) mapped_iris &lt;-cbind(mapped_iris, Species = iris$Species) ggplot() + geom_point(data=mapped_iris,aes(x = PC1, y = PC2, colour = Species)) pca_data &lt;-data[,c(&quot;f381&quot;,&quot;f408&quot;,&quot;f495&quot;,&quot;f529&quot;,&quot;f549&quot;,&quot;f539&quot;,&quot;f579&quot;,&quot;f634&quot;,&quot;f706&quot;,&quot;f743&quot;)] pca_data &lt;-na.omit(pca_data) #Normalise the data before applying PCA analysis mean=0, and sd=1 scaled_pca_data &lt;-scale(pca_data) pca_results &lt;-prcomp(scaled_pca_data) plot(pca_results) MCA principal component regression Partial least square regression supervised dimension reduction techniques use the response to guide the dimension reduction of the predictors such that the new predictors are optimally related to the response. Partial least squares (PLS) is a supervised version of PCA that reduces dimension in a way that is optimally related to the response. Specifically, the objective of PLS is to find linear functions (called latent variables) of the predictors that have optimal covariance with the response. This means that the response guides the dimension reduction such that the scores have the highest possible correlation with the response in the training data. Multidimendional scaling MDS Linear discriminant Analysis LDA Mixture discriminant Analysis MDA Quadratic discriminant analysis QDA Kernel Principal Component Analysis Principal component analysis is an effective dimension reduction technique when predictors are linearly correlated and when the resulting scores are associated with the response. However, the orthogonal partitioning of the predictor space may not provide a good predictive relationship with the response, especially if the true underlying relationship between the predictors and the response is non-linear =&gt; see scaterplot Non-negative Matrix Factorization linear projection method that is specific to features that are are positive or zero. In this case, the algorithm finds the coefficients of A such that their values are also non-negative (thus ensuring that the new features have the same property). This approach is popular for text data where predictors are word counts, imaging, and biological measures Autoencodres Autoencoders are computationally complex multivariate methods for finding representations of the predictor data and are commonly used in deep learning models (Goodfellow, Bengio, and Courville 2016). The idea is to create a nonlinear mapping between the original predictor data and a set artificial features. One situation to use an autoencoder is when there is an abundance of unlabeled data 5.2 Cluster analysis Group data in most homegenous group. Clustering toujours la même chose, le truc qui change est la metrique. Différent type de clustering : - Connectivity models : Distance connectivity between observations is the measure, e.g., hierarchical clustering. - Centroid models : Distance from mean value of each observation/cluster is the measure, e.g., k-means. - Distribution models : Significance of statistical distribution of variables in the dataset is the measure, e.g., expectation maximization algorithms. - Density models: Density in data space is the measure, e.g., DBSCAN models. - Hard Clustering: Each object belongs to exactly one cluster - Soft Clustering : Each object has some likelihood of belonging to a different cluster Remarque : pas de selection de variables dans le clustering, il faut porter de l’attention sur le dataset et les variables utilisées. A good clustering algorithm can be evaluated based on two primary objectives: - High intra-class similarity - Low inter-class similarity Choix de la mesure de similarité important # introduction to dataset Data_House_Worth &lt;-read.csv(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 6/House Worth Data.csv&quot;,header=TRUE); str(Data_House_Worth) ## &#39;data.frame&#39;: 316 obs. of 5 variables: ## $ HousePrice : int 138800 155000 152000 160000 226000 275000 215000 392000 325000 151000 ... ## $ StoreArea : num 29.9 44 46.2 46.2 48.7 56.4 47.1 56.7 84 49.2 ... ## $ BasementArea : int 75 504 493 510 445 1148 380 945 1572 506 ... ## $ LawnArea : num 11.22 9.69 10.19 6.82 10.92 ... ## $ HouseNetWorth: Factor w/ 3 levels &quot;High&quot;,&quot;Low&quot;,&quot;Medium&quot;: 2 3 3 3 3 1 3 1 1 3 ... Data_House_Worth$BasementArea &lt;-NULL ggplot(Data_House_Worth, aes(StoreArea, LawnArea, color = HouseNetWorth))+geom_point() Hierarchical Clustering Chaque data sont dans un cluster. Les clusters sont aggrégé hiérachiquement en fonction d’une distance la plus faible jusqu’au moment ou il ne reste qu’un cluster. Hierarchical clustering is based on the connectivity model of clusters. The steps involved in the clustering process are: Start with N clusters,(i.e., assign each element to its own cluster). Now merge pairs of clusters with the closest to other Again compute the distance (similarities) and merge with closest one. Repeat Steps 2 and 3 to exhaust the items until you get all data points in one cluster. Chose cutoff at how many clusters you want to have. library(ggplot2) library(ggdendro) ## Warning: package &#39;ggdendro&#39; was built under R version 3.3.3 # Hierachical clustering clusters &lt;-hclust(dist(Data_House_Worth[,2:3])) #Plot the dendogram plot(clusters) #create different number of cluster clusterCut_2 &lt;-cutree(clusters, 2) #table the clustering distribution with actual networth table(clusterCut_2,Data_House_Worth$HouseNetWorth) ## ## clusterCut_2 High Low Medium ## 1 104 135 51 ## 2 26 0 0 clusterCut_3 &lt;-cutree(clusters, 3) table(clusterCut_3,Data_House_Worth$HouseNetWorth) ## ## clusterCut_3 High Low Medium ## 1 0 122 1 ## 2 104 13 50 ## 3 26 0 0 # ici choix du nombre cluster = 3 par hypothèse sur le business ggplot(Data_House_Worth, aes(StoreArea, LawnArea, color = HouseNetWorth)) + geom_point(alpha =0.4, size =3.5) +geom_point(col = clusterCut_3) + scale_color_manual(values =c(&#39;black&#39;, &#39;red&#39;, &#39;green&#39;)) ## Iris Example iris_dist &lt;- dist(scale(subset(iris, select = -Species))) clustering &lt;- hclust(iris_dist) plot(clustering) ggdendrogram(clustering) + theme_dendro() clusters = cutree(clustering,k = 3) data = cbind(mapped_iris, Cluster = clusters) ggplot() + geom_point(data= data, aes(x = PC1, y = PC2, shape = Species, colour = Cluster)) K-means clustering K-means place observations into Kclusters by minimizing the wihtin-cluster sum of squares (WCSS). WCSS est la somme des distance entre chaque observation et le centre du cluster. Algorithm : - Assignment: Assign each observation to the cluster that gives the minimum within cluster sum of squares (WCSS). - Update: Update the centroid by taking the mean of all the observation in the cluster. - These two steps are iteratively executed until the assignments in any two consecutive iteration don’t change To find the optimal value of k, we use and Elbow curve that show percentage of variance explained as a functionof nombrr of cluster wss &lt;-(nrow(Data_House_Worth)-1)*sum(apply(Data_House_Worth[,2:3],2,var)) for (i in 2:15) { wss[i]&lt;-sum(kmeans(Data_House_Worth[,2:3],centers=i)$withinss) } plot(1:15, wss, type=&quot;b&quot;, xlab=&quot;Number of Clusters&quot;,ylab=&quot;Within groups sum of squares&quot;) # 3 cluster explain most of the variance in data. 4cluster not more interest and not in concordance with intuition # Model Cluster_kmean &lt;-kmeans(Data_House_Worth[,2:3], 3, nstart =20) table(Cluster_kmean$cluster,Data_House_Worth$HouseNetWorth) ## ## High Low Medium ## 1 0 122 1 ## 2 46 13 50 ## 3 84 0 0 Cluster_kmean$cluster &lt;-factor(Cluster_kmean$cluster) ggplot(Data_House_Worth, aes(StoreArea, LawnArea, color = HouseNetWorth)) + geom_point(alpha =0.4, size =3.5) +geom_point(col = Cluster_kmean$cluster) +scale_color_manual(values =c(&#39;black&#39;, &#39;red&#39;, &#39;green&#39;)) # Capture cluster very well Ditribution-based clustering Distribution methods are iterative methods to fit a set of dataset into clusters by optimizing distributions of datasets in clusters (i.e. Gaussian distribution). - First randomly choose Gaussian parameters and fit it to set of data points. - Iteratively optimize the distribution parameters to fit as many points it can. - Once it converges to a local minima, you can assign data points closer to that distribution of that cluster =&gt; Attention cette méthode souffre d’overfitting library(EMCluster, quietly =TRUE) ## Warning: package &#39;EMCluster&#39; was built under R version 3.3.3 #model ret &lt;-init.EM(Data_House_Worth[,2:3], nclass =3) ret ## Method: em.EMRnd.EM ## n = 316, p = 2, nclass = 3, flag = 0, logL = -1871.0332. ## nc: ## [1] 48 100 168 ## pi: ## [1] 0.2000 0.2507 0.5493 # assign class ret.new &lt;-assign.class(Data_House_Worth[,2:3], ret, return.all =FALSE) plotem(ret,Data_House_Worth[,2:3]) ggplot(Data_House_Worth, aes(StoreArea, LawnArea, color = HouseNetWorth)) + geom_point(alpha =0.4, size =3.5) +geom_point(col = ret.new$class) + scale_color_manual(values =c(&#39;black&#39;, &#39;red&#39;, &#39;green&#39;)) # good fort high and low. Density based clustering DBSCAN see more on Machine Learning Using R p 349 exemple avec Fuzzy C-Means Clustering This is the fuzzy version of the known k-means clustering algorithm as well as an online variant (Unsupervised Fuzzy Competitive learning). Observe that we are passing the value ucfl to the parameter method, which does an online update of model using Unsupervised Fuzzy Competitive Learning (UCFL). On suppose que les donn?es ce mettent a jours et a chaque nouvelle observation le modle s’update library(e1071) ## Warning: package &#39;e1071&#39; was built under R version 3.3.3 Data_House_Worth &lt;-read.csv(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 6/House Worth Data.csv&quot;,header=TRUE) str(Data_House_Worth) ## &#39;data.frame&#39;: 316 obs. of 5 variables: ## $ HousePrice : int 138800 155000 152000 160000 226000 275000 215000 392000 325000 151000 ... ## $ StoreArea : num 29.9 44 46.2 46.2 48.7 56.4 47.1 56.7 84 49.2 ... ## $ BasementArea : int 75 504 493 510 445 1148 380 945 1572 506 ... ## $ LawnArea : num 11.22 9.69 10.19 6.82 10.92 ... ## $ HouseNetWorth: Factor w/ 3 levels &quot;High&quot;,&quot;Low&quot;,&quot;Medium&quot;: 2 3 3 3 3 1 3 1 1 3 ... Data_House_Worth$BasementArea &lt;-NULL online_cmean &lt;-cmeans(Data_House_Worth[,2:3],3,20,verbose=TRUE, method=&quot;ufcl&quot;,m=2) ## Iteration: 1, Error: 97.2393128124 ## Iteration: 2, Error: 96.9282208099 ## Iteration: 3, Error: 96.6317544097 ## Iteration: 4, Error: 96.3470365499 ## Iteration: 5, Error: 96.0721680305 ## Iteration: 6, Error: 95.8061471449 ## Iteration: 7, Error: 95.5487734692 ## Iteration: 8, Error: 95.3005344599 ## Iteration: 9, Error: 95.0624783248 ## Iteration: 10, Error: 94.8360798386 ## Iteration: 11, Error: 94.6231069032 ## Iteration: 12, Error: 94.4254949137 ## Iteration: 13, Error: 94.2452340625 ## Iteration: 14, Error: 94.0842724003 ## Iteration: 15, Error: 93.9444354145 ## Iteration: 16, Error: 93.8273614059 ## Iteration: 17, Error: 93.7344511055 ## Iteration: 18, Error: 93.6668296543 ## Iteration: 19, Error: 93.6253191300 ## Iteration: 20, Error: 93.6104200735 # print(online_cmean) ggplot(Data_House_Worth, aes(StoreArea, LawnArea, color = HouseNetWorth)) + geom_point(alpha =0.4, size =3.5) +geom_point(col = online_cmean$cluster) + scale_color_manual(values =c(&#39;black&#39;, &#39;red&#39;, &#39;green&#39;)) 5.3 Evaluation of clustering Internal evaluation Dunn Index : the ratio between the minimal intercluster distances to the maximal intracluster distance. But high score Silhouette Coefficient : the average distance to elements in the same cluster with the average distance to elements in other clusters. Objects with a high silhouette value are considered well clustered external evaluation on test set Rand index : similar to classification rate in multi-class classification problems. measures how many items that are returned by the cluster and expert (labeled) are common and how many differ. \\(RI = \\frac{TP+TN}{TP/FP/FN/TN}\\) (true positive, true negative,…) Jaccard index : measures the overlap of external labels and labels generated by the cluster algorithms. The Jaccard index value varies between 0 and 1, 0 implying no overlap while 1 means identical datasets. $J= = 5.4 Association Rule Mining Algorithms Association rule learning is a method for discovering interesting relations between variables in large databases using some measures of interestingness. Pratique courante sur les transactional (supermarket, library,…). Pour mettre produit ensemble pourune promo, planning, customer segmentation, … Usefull measures : Support : is the proportion of transactions in which an item set appears Confidence : indicates the strength of a rule. is the conditional probability $conf(X=&gt;Y) = Lift : is a ratio between the observed support to the expected support. If = 1 then independent. $ Lift(X=&gt;Y) = =&gt; more information in Beginning Data Science With R p 192 or Machine learning with R chap 6.10 5.5 Singular Value decomposition 5.6 K-Nearest Neighbot 5.7 Others unsuppervised algorithms Learning Vector Quantization Self-Organizing MAP (SQM) Partitioning around Medoids PAM "],
["decision-tree.html", "Chapter 6 Decision Tree 6.1 Type of décision tree 6.2 Decision measures : measure of node purity (heterogeneity of the node) 6.3 Decision tree learning methods 6.4 Random Forests", " Chapter 6 Decision Tree Decision tree are class of non parametric model with generaly a catégorical dependant variable. Globalement c’est un abre de decision qui se split a chaque neaux selon une variable selectionné suivant différentes metrics. Decision tree consists of two types of nodes : leaf node : indicate class defined by the response variable decision node : which specifies some test on a single attributes DT use recursive divide and conquer approach. 6.1 Type of décision tree Regression tree : variables réponse continue. Objectif est de split a chaque itération en minimisant les residual sum squares RSS. Recursively split the feature vector space (X1, X2, ., Xp) into distinct and non-overlapping regions For new observations falling into the same region, the prediction is equal to the mean of all the training observations in that region. Classification tree : variables categorielle We use classification error rate for making the splits in classification trees. Instead of taking the mean of response variable in a particular region for prediction, here we use the most commonly occurring class of training observation as a prediction methodology. 6.2 Decision measures : measure of node purity (heterogeneity of the node) Gini Index : $ G = p_{ml}*(1-P_{mp}) $ where, pmk is the proportion of training observations in the mth region that are from the kth class Entropy function : $ E = - curve(-x *log2(x) -(1 -x) *log2(1 -x), xlab =&quot;x&quot;, ylab =&quot;Entropy&quot;, lwd =5) Observe that both measures are very similar, however, there are some differences: - Gini-index is more suitable to continuous attributes and entropy in case of discrete data. - Gini-index works well for minimizing misclassifications. - Entropy is slightly slower than Gini-index, as it involves logarithms (although this doesn’t really matter much given today’s fast computing machines) Information gain : Measure du changement de l’entrepy entre avant et apres le split 6.3 Decision tree learning methods Iterative Dichotomizer 3 : most popular décision tree algorithms Calculate entropy of each attribute using training observations Split the observations into subsets using the attribute with minimum entropy or maximum information gain. The selected attribute becomes the decision node. Repeat the process with the remaining attribute on the subset. pas super performant pour le multiclass classification C5.0 algorithm : il split les noeuds en 3 possibilités All observations are a single classe =&gt; identify class No class =&gt; use the most frequent class at the parent of this node mixtureof classes =&gt; a test based on single attribute (use information gain) Repete jusqu’au moment outout les observations sont correctement classifié. On utilise pruning pour réduire l’overfitting. Mais avec C50 on utilise pas pruning car algorithm iterate back and replace leaf that dosn’t increase the information gain. Classification and regression tree - CART : Use residual sum square as the node impurity measure. SI utilisation pour pure classification GINI indix peut etre plus approprié comme mesure d’impurité Start the algorithm at the root node. For each attribute X, find the subset S that minimizes the residual sum of square (RSS) of the two children and chooses the split that gives the maximum information gain. Check if relative decrease in impurity is below a prescribed threshold. If Yes, splitting stops, otherwise repeat Step 2. on peut aussi utiliser un parametre de complexité (cp) : any split that does not decrease the overall lack of fit by a factor of cp would not be attempted by the model Chi-square automated interaction detection - CHAID Ici uniquement pour variable catégoriel. variables continues sont catégorisé par optimal bining. L’algorithm fusion les catégories sinon significative avec la variables dépendante. De même si une catégorie a trop peu d’observation, elle est fusionnée avec la catégorie la plus similaire mesurée par la pval tu test chi2. CHAID détecte l’interaction entre variables dans un jeu de données. En utilisant cette technique on peut établir des relations de dépendance entre variable; L’algorithme CHAID2 se déroule en trois étapes : préparation des prédicteurs : transformation en variable catégoriel par optimal bining fusion des classes : pour chaque prédicteur, on determine les catégorie les plus semblable par rapport a la variables dependante. (chi2) Repetition de l’étape jusqu’àavoir une catégorie fusionnée significative non indépendante. Ajuste les pval par bonferonni si des classe ont été fusionnée sélection de la variable de séparation : choisi la variable avec la plus faible pval (au test indépendante chi2 ajusté avec bonferonni), la plus significative. Processus iteratif. Si pval dépasse un seuil, le processus prend fin stopping : Si node est pure:no split pval &gt; seuil : nosplit library(C50) library(splitstackshape) library(rattle) library(rpart.plot) library(data.table) library(gmodels) ### Data prep ### Data_Purchase &lt;-fread(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 6/PurchasePredictionDataset.csv&quot;,header=T,verbose =FALSE, showProgress =FALSE) table(Data_Purchase$ProductChoice) ## ## 1 2 3 4 ## 106603 199286 143893 50218 #Pulling out only the relevant data to this chapter Data_Purchase &lt;-Data_Purchase[,c(&quot;CUSTOMER_ID&quot;,&quot;ProductChoice&quot;,&quot;MembershipPoints&quot;,&quot;IncomeClass&quot;,&quot;CustomerPropensity&quot;,&quot;LastPurchaseDuration&quot;)] #Delete NA from subset Data_Purchase &lt;-na.omit(Data_Purchase) Data_Purchase$CUSTOMER_ID &lt;-as.character(Data_Purchase$CUSTOMER_ID) #Stratified Sampling Data_Purchase_Model&lt;-stratified(Data_Purchase, group=c(&quot;ProductChoice&quot;),size =10000,replace=FALSE) table(Data_Purchase_Model$ProductChoice) ## ## 1 2 3 4 ## 10000 10000 10000 10000 Data_Purchase_Model$ProductChoice &lt;-as.factor(Data_Purchase_Model$ProductChoice) Data_Purchase_Model$IncomeClass &lt;-as.factor(Data_Purchase_Model$IncomeClass) Data_Purchase_Model$CustomerPropensity &lt;-as.factor(Data_Purchase_Model$CustomerPropensity) #Build the decision tree on Train Data (Set_1) and then test data (Set_2) will be used for performance testing set.seed(917) train &lt;- Data_Purchase_Model[sample(nrow(Data_Purchase_Model),size=nrow(Data_Purchase_Model)*(0.7), replace =TRUE, prob =NULL),] train &lt;-as.data.frame(train) test &lt;-Data_Purchase_Model[!(Data_Purchase_Model$CUSTOMER_ID %in%train$CUSTOMER_ID),] # save(train, file=&quot;./save/train.RData&quot;) # save(test, file=&quot;./save/test.RData&quot;) library(RWeka) # WPM(&quot;refresh-cache&quot;) # WPM(&quot;install-package&quot;, &quot;simpleEducationalLearningSchemes&quot;) ### ID3 model ### # ID3 &lt;-make_Weka_classifier(&quot;weka/classifiers/trees/Id3&quot;) # ID3Model &lt;-ID3(ProductChoice ~CustomerPropensity +IncomeClass ,data = train) # # v = summary(ID3Model) # # saveRDS(v, &quot;ID3Model.rds&quot;) ID3model &lt;- readRDS(&quot;./save/ID3Model.rds&quot;) ID3model ## ## === Summary === ## ## Correctly Classified Instances 9268 33.1 % ## Incorrectly Classified Instances 18732 66.9 % ## Kappa statistic 0.1078 ## Mean absolute error 0.3646 ## Root mean squared error 0.427 ## Relative absolute error 97.2403 % ## Root relative squared error 98.6105 % ## Total Number of Instances 28000 ## ## === Confusion Matrix === ## ## a b c d &lt;-- classified as ## 4792 315 1439 509 | a = 1 ## 3812 494 1812 898 | b = 2 ## 2701 421 2485 1298 | c = 3 ## 2918 416 2193 1497 | d = 4 # library(gmodels) # purchase_pred_test &lt;-predict(ID3model, test) # CrossTable(test$ProductChoice, purchase_pred_test, prop.chisq =FALSE, # prop.c =FALSE, prop.r =FALSE, # dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) # train set accurancy : 33.3036% # test set accurancy : 0.159+0.004+0.086+ 0.073 = 33.2% # test and train are proche : sign of no overfitting ### C50 model ### model_c50 &lt;-C5.0(train[,c(&quot;CustomerPropensity&quot;,&quot;LastPurchaseDuration&quot;, &quot;MembershipPoints&quot;)], train[,&quot;ProductChoice&quot;], control =C5.0Control(CF =0.001, minCases =2)) summary(model_c50) ## ## Call: ## C5.0.default(x = train[, c(&quot;CustomerPropensity&quot;, ## &quot;LastPurchaseDuration&quot;, &quot;MembershipPoints&quot;)], y = ## train[, &quot;ProductChoice&quot;], control = C5.0Control(CF = 0.001, minCases = 2)) ## ## ## C5.0 [Release 2.07 GPL Edition] Sat Sep 22 17:24:23 2018 ## ------------------------------- ## ## Class specified by attribute `outcome&#39; ## ## Read 28000 cases (4 attributes) from undefined.data ## ## Decision tree: ## ## CustomerPropensity in {High,VeryHigh}: ## :...MembershipPoints &lt;= 1: 4 (1360/767) ## : MembershipPoints &gt; 1: 3 (7620/4935) ## CustomerPropensity in {Low,Medium,Unknown}: ## :...MembershipPoints &lt;= 1: 4 (3159/1795) ## MembershipPoints &gt; 1: ## :...LastPurchaseDuration &lt;= 3: 1 (7040/4224) ## LastPurchaseDuration &gt; 3: ## :...CustomerPropensity in {Low,Medium}: ## :...CustomerPropensity = Low: 2 (2330/1695) ## : CustomerPropensity = Medium: 3 (2515/1723) ## CustomerPropensity = Unknown: ## :...LastPurchaseDuration &lt;= 13: 1 (3338/2150) ## LastPurchaseDuration &gt; 13: 2 (638/406) ## ## ## Evaluation on training data (28000 cases): ## ## Decision Tree ## ---------------- ## Size Errors ## ## 8 17695(63.2%) &lt;&lt; ## ## ## (a) (b) (c) (d) &lt;-classified as ## ---- ---- ---- ---- ## 4004 741 1434 876 (a): class 1 ## 2917 867 2269 963 (b): class 2 ## 2026 679 3477 723 (c): class 3 ## 1431 681 2955 1957 (d): class 4 ## ## ## Attribute usage: ## ## 100.00% CustomerPropensity ## 100.00% MembershipPoints ## 56.65% LastPurchaseDuration ## ## ## Time: 0.1 secs plot(model_c50) purchase_pred_train &lt;-predict(model_c50, train,type =&quot;class&quot;) vtrain = CrossTable(train$ProductChoice, purchase_pred_train, prop.chisq =FALSE, prop.c =FALSE, prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) ## ## ## Cell Contents ## |-------------------------| ## | N | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 28000 ## ## ## | predicted default ## actual default | 1 | 2 | 3 | 4 | Row Total | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 1 | 4004 | 741 | 1434 | 876 | 7055 | ## | 0.143 | 0.026 | 0.051 | 0.031 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 2 | 2917 | 867 | 2269 | 963 | 7016 | ## | 0.104 | 0.031 | 0.081 | 0.034 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 3 | 2026 | 679 | 3477 | 723 | 6905 | ## | 0.072 | 0.024 | 0.124 | 0.026 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 4 | 1431 | 681 | 2955 | 1957 | 7024 | ## | 0.051 | 0.024 | 0.106 | 0.070 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## Column Total | 10378 | 2968 | 10135 | 4519 | 28000 | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## ## purchase_pred_test &lt;-predict(model_c50, test) vtest = CrossTable(test$ProductChoice, purchase_pred_test, prop.chisq =FALSE, prop.c =FALSE, prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) ## ## ## Cell Contents ## |-------------------------| ## | N | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 20002 ## ## ## | predicted default ## actual default | 1 | 2 | 3 | 4 | Row Total | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 1 | 2830 | 517 | 1019 | 632 | 4998 | ## | 0.141 | 0.026 | 0.051 | 0.032 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 2 | 2131 | 599 | 1613 | 652 | 4995 | ## | 0.107 | 0.030 | 0.081 | 0.033 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 3 | 1480 | 494 | 2513 | 548 | 5035 | ## | 0.074 | 0.025 | 0.126 | 0.027 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 4 | 1047 | 453 | 2041 | 1433 | 4974 | ## | 0.052 | 0.023 | 0.102 | 0.072 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## Column Total | 7488 | 2063 | 7186 | 3265 | 20002 | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## ## sum(diag(vtrain$prop.tbl)) ## [1] 0.3680357 sum(diag(vtest$prop.tbl)) ## [1] 0.3687131 ### CART MODEL ### CARTModel &lt;-rpart(ProductChoice ~IncomeClass +CustomerPropensity +LastPurchaseDuration +MembershipPoints, data=train) summary(CARTModel) ## Call: ## rpart(formula = ProductChoice ~ IncomeClass + CustomerPropensity + ## LastPurchaseDuration + MembershipPoints, data = train) ## n= 28000 ## ## CP nsplit rel error xerror xstd ## 1 0.09181189 0 1.0000000 1.0034376 0.003456583 ## 2 0.02998329 1 0.9081881 0.9081881 0.003728709 ## 3 0.01174505 2 0.8782048 0.8782048 0.003792713 ## 4 0.01000000 3 0.8664598 0.8730962 0.003802669 ## ## Variable importance ## CustomerPropensity MembershipPoints LastPurchaseDuration ## 61 38 1 ## ## Node number 1: 28000 observations, complexity param=0.09181189 ## predicted class=1 expected loss=0.7480357 P(node) =1 ## class counts: 7055 7016 6905 7024 ## probabilities: 0.252 0.251 0.247 0.251 ## left son=2 (19020 obs) right son=3 (8980 obs) ## Primary splits: ## CustomerPropensity splits as RLLLR, improve=433.38490, (0 missing) ## MembershipPoints &lt; 1.5 to the right, improve=245.08840, (0 missing) ## LastPurchaseDuration &lt; 5.5 to the left, improve=213.55780, (0 missing) ## IncomeClass splits as LLRLLLRRRR, improve= 24.12748, (0 missing) ## Surrogate splits: ## LastPurchaseDuration &lt; 14.5 to the left, agree=0.684, adj=0.015, (0 split) ## IncomeClass splits as LLLLLLLLLR, agree=0.679, adj=0.000, (0 split) ## MembershipPoints &lt; 11.5 to the left, agree=0.679, adj=0.000, (0 split) ## ## Node number 2: 19020 observations, complexity param=0.02998329 ## predicted class=1 expected loss=0.6873817 P(node) =0.6792857 ## class counts: 5946 5140 3873 4061 ## probabilities: 0.313 0.270 0.204 0.214 ## left son=4 (15861 obs) right son=5 (3159 obs) ## Primary splits: ## MembershipPoints &lt; 1.5 to the right, improve=242.67250, (0 missing) ## LastPurchaseDuration &lt; 3.5 to the left, improve= 97.77570, (0 missing) ## CustomerPropensity splits as -RRL-, improve= 90.30872, (0 missing) ## IncomeClass splits as LRRRRRRRRR, improve= 10.76842, (0 missing) ## ## Node number 3: 8980 observations, complexity param=0.01174505 ## predicted class=3 expected loss=0.6623608 P(node) =0.3207143 ## class counts: 1109 1876 3032 2963 ## probabilities: 0.123 0.209 0.338 0.330 ## left son=6 (7620 obs) right son=7 (1360 obs) ## Primary splits: ## MembershipPoints &lt; 1.5 to the right, improve=29.631780, (0 missing) ## LastPurchaseDuration &lt; 5.5 to the left, improve=27.915920, (0 missing) ## CustomerPropensity splits as L---R, improve=26.860990, (0 missing) ## IncomeClass splits as LLRRLLRRLR, improve= 7.647919, (0 missing) ## Surrogate splits: ## IncomeClass splits as RLLLLLLLLL, agree=0.849, adj=0.001, (0 split) ## ## Node number 4: 15861 observations ## predicted class=1 expected loss=0.6715213 P(node) =0.5664643 ## class counts: 5210 4457 3497 2697 ## probabilities: 0.328 0.281 0.220 0.170 ## ## Node number 5: 3159 observations ## predicted class=4 expected loss=0.5682178 P(node) =0.1128214 ## class counts: 736 683 376 1364 ## probabilities: 0.233 0.216 0.119 0.432 ## ## Node number 6: 7620 observations ## predicted class=3 expected loss=0.6476378 P(node) =0.2721429 ## class counts: 969 1596 2685 2370 ## probabilities: 0.127 0.209 0.352 0.311 ## ## Node number 7: 1360 observations ## predicted class=4 expected loss=0.5639706 P(node) =0.04857143 ## class counts: 140 280 347 593 ## probabilities: 0.103 0.206 0.255 0.436 fancyRpartPlot(CARTModel) purchase_pred_train &lt;-predict(CARTModel, train,type =&quot;class&quot;) # vtrain = CrossTable(train$ProductChoice, purchase_pred_train, prop.chisq =FALSE, prop.c =FALSE, prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) # Training set Accuracy = 27% # not the bast for classification ### MODEL CHAID ### #install.packages(&quot;CHAID&quot;, repos=&quot;http://R-Forge.R-project.org&quot;) library(CHAID) ctrl &lt;- chaid_control(minsplit =200, minprob =0.1) CHAIDModel &lt;-chaid(ProductChoice ~CustomerPropensity +IncomeClass, data = train, control = ctrl) purchase_pred_train &lt;-predict(CHAIDModel, train) vtrain = CrossTable(train$ProductChoice, purchase_pred_train, prop.chisq =FALSE, prop.c =FALSE, prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) ## ## ## Cell Contents ## |-------------------------| ## | N | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 28000 ## ## ## | predicted default ## actual default | 1 | 2 | 3 | 4 | Row Total | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 1 | 4635 | 69 | 1901 | 450 | 7055 | ## | 0.166 | 0.002 | 0.068 | 0.016 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 2 | 3630 | 130 | 2638 | 618 | 7016 | ## | 0.130 | 0.005 | 0.094 | 0.022 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 3 | 2433 | 70 | 3689 | 713 | 6905 | ## | 0.087 | 0.002 | 0.132 | 0.025 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## 4 | 2678 | 80 | 3384 | 882 | 7024 | ## | 0.096 | 0.003 | 0.121 | 0.032 | | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## Column Total | 13376 | 349 | 11612 | 2663 | 28000 | ## ---------------|-----------|-----------|-----------|-----------|-----------| ## ## sum(diag(vtrain$prop.tbl)) ## [1] 0.3334286 plot(CHAIDModel) 6.4 Random Forests Fait partie des ensemble trees (boosting, bagging, .. etc). Random forests généralise les decision trees en contruistant plusieurs DT et les combinant. Soit N nbr d’observation, n nombre de DT et M le nombre de variables du dataset Choose a subset of m variables from M (m&lt;&lt;M) and buld n DT using ramdon set of m variable Grow each tree as large os possible Use majority voting to decide the class of the observation ### Data prep ### library(caret) ## Warning: package &#39;caret&#39; was built under R version 3.3.3 ## Loading required package: lattice ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## lift library(gmodels) load(&quot;./save/train.RData&quot;) load(&quot;./save/test.RData&quot;) set.seed(100) ; dim(train) ; train = train[1:2000,] ## [1] 28000 6 control &lt;- trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=2) # rfModel &lt;-train(ProductChoice ~CustomerPropensity +LastPurchaseDuration +MembershipPoints, # data=train, # method=&quot;rf&quot;, # trControl=control) # saveRDS(rfModel, &quot;rfModel.rds&quot;) rfModel &lt;- readRDS(&quot;./save/rfModel.rds&quot;) purchase_pred_train &lt;-predict(rfModel, train) # vtrain = CrossTable(train$ProductChoice, purchase_pred_train, prop.chisq =FALSE, prop.c =FALSE, # prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) purchase_pred_train &lt;-predict(rfModel, test) # vtest = CrossTable(test$ProductChoice, purchase_pred_train, prop.chisq =FALSE, prop.c =FALSE, # prop.r =FALSE,dnn =c(&#39;actual default&#39;, &#39;predicted default&#39;)) sum(diag(vtrain$prop.tbl)) ## [1] 0.3334286 sum(diag(vtest$prop.tbl)) ## [1] 0.3687131 # de tout les DT meilleur accurancy sur le test et le train mais probleme d&#39;overfitting ### RF on continuous variable ### library(Metrics) ## Warning: package &#39;Metrics&#39; was built under R version 3.3.3 library(randomForest) ## Warning: package &#39;randomForest&#39; was built under R version 3.3.3 ## randomForest 4.6-12 ## Type rfNews() to see new features/changes/bug fixes. ## ## Attaching package: &#39;randomForest&#39; ## The following object is masked from &#39;package:rattle&#39;: ## ## importance ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine ## The following object is masked from &#39;package:ggplot2&#39;: ## ## margin RF &lt;- randomForest(dist ~ speed, data = cars) rmse(cars$dist,predict(RF, cars)) ## [1] 11.84672 "],
["neural-network.html", "Chapter 7 Neural Network 7.1 Neural Networks Basis 7.2 Neural Network Architecture 7.3 Deep Learning", " Chapter 7 Neural Network ## Instal tensorflow # devtools::install_github(&quot;rstudio/reticulate&quot;) # devtools::install_github(&quot;rstudio/tfestimators&quot;) # library(tfestimators) # install_tensorflow() # # SEE more information / exemple : https://tensorflow.rstudio.com/blog/keras-fraud-autoencoder.html Neural Network algorithms work on complex neural structures that can abstract higher level of information from a huge dataset. They are computationally heavy and hard to train. We provide a deep architecture network and image recognition (convolutional nets) : Deep Boltzmann Machine DBM Deep Belief Network DBN Convolutional Neural Network CNN Stacked auto Encoders RELU : fonction de lien activation fonction so much better than sigmoid (help with the vanishing gradient problem ???) What is deep neural netwwork : Deep Neural network consists of more hidden layers Each Input will be connected to the hidden layer and the NN will decide the connections. Pratique car : We no longer need to make any assumptions about our data; any type of data works in neural networks (categorical and numerical). They are scalable techniques, can take in billions of data points,and can capture a very high level of abstraction. Utilise le Learning and updating. Essai erreur. pour amélioréer les resultats 7.1 Neural Networks Basis Artificial neural networks have three main components to set up : Architecture: Number of layers, weights matrix, bias, connections,… Rules: Refer to the mechanism of how the neurons behave in response to signals from each other. Learning rule: The way in which the neural network’s weights change with time. Perceptron : Basic unit of ANN Takes multiple input and produce binary output. binary classification algorithm basé sur des prédicteurs linéaire et une fonction de poids \\(f(x) = 1 Si wx+b &gt;0\\) simple neural network Single perceptron algorithm Initialize de weights to some feasible values For each data point in a training set, do step 3 and 4. Calcul the output with previous step weights $$ y_j(t) = f[w(t)x_j] = f[w_0(t)x_{j,0} + w_1(t)x_{j,1} + w_2(t)x_{j,2}+ … + w_n(t)x_j,n] Update the weight : \\(w_i(t+1) = w_i(t)+(d_j-y_j(t))x_{j,i}\\) for all feature \\(0&lt;i&lt;n\\) Stop when reach stopping criteria All points in training set are exhausted a preset number of iteration iteration error (\\(= \\frac{1}{s} \\sum |d_j - y_j(t)|\\)) is less than threshold error. Sigmoid Neuron Sigmoid Neuron ($ S(t) = ) allow a continuous output. similar to logistic curve. Tout comme le perceptron, le sigmoid neuron has weight for each input et un biais global. simple neural network 7.2 Neural Network Architecture artificial neural network Artificial neural networt expand the simple peceptron to a multi layer perceptron (MLP). THis is a neural network architeture that can deal with non linear separation as output. Hidden layers : predicts connection between inputs automatically. Doesn’t have any direct input. Finding the hidden layer design and number is notstraightforward. Il existe plusieurs disign pour les hidden layer, par exemple : Feedforward Neural Networks (FFNN): each input layer is in one direction. This network makes sure that there are no loops within the neural network. (le plus general) Specialization versus Generalization: If you have too many hidden layers/complicated architecture, the neural network tend to be very specialized (so overfits). If you use simple architecture that the model will be very generalized and would not fit the data properly. Feed-Forward back propagation One of the most popular learning methodologies in neural networks. It can by use to train artificial neural network. Method works on the gradient descent principle so the neuron function should be defferential. artificial neural network We will give amathematical representation of error correction when the sigmoid function is used as the activation function. This algorithm will be correcting for error in each iteration and coverage to a point where it has no more reducible error : - 1. Feed-forward the network with input and get the output. - 2. Backward propagation of output, to calculate delta at each neuron (error). - 3. Multiply the delta and input activation function to get the gradient of weight. - 4. Update the weight by subtracting a ratio from the gradient of the weight. To update the weight bij using gradient descent, you must choose a learning rate Example : purchase prediction : NN classification #data preparation Data_Purchase_Prediction &lt;-read.csv(&quot;C:/Users/007/Desktop/Data science with R/R/Dataset/Chapter 6/PurchasePredictionDataset.csv&quot;,header=TRUE) Data_Purchase_Prediction$choice &lt;-ifelse(Data_Purchase_Prediction$ProductChoice ==1,1, ifelse(Data_Purchase_Prediction$ProductChoice ==3,0,999)) Data_Neural_Net &lt;-Data_Purchase_Prediction[Data_Purchase_Prediction$choice%in%c(&quot;0&quot;,&quot;1&quot;),] #Remove Missing Values Data_Neural_Net &lt;-na.omit(Data_Neural_Net) rownames(Data_Neural_Net) &lt;-NULL # Usually scaling the continuous variables in the intervals [0,1] or [-1,1] tends to give better results. Convert the categorical variables into binary variables. #Transforming the continuous variables cont &lt;-Data_Neural_Net[,c(&quot;PurchaseTenure&quot;,&quot;CustomerAge&quot;,&quot;MembershipPoints&quot;,&quot;IncomeClass&quot;)] maxs &lt;-apply(cont, 2, max) mins &lt;-apply(cont, 2, min) scaled_cont &lt;-as.data.frame(scale(cont, center = mins, scale = maxs -mins)) #The dependent variable dep &lt;-factor(Data_Neural_Net$choice) # Multifactor data to binaries variables Data_Neural_Net$ModeOfPayment &lt;-factor(Data_Neural_Net$ModeOfPayment) flags_ModeOfPayment =data.frame(Reduce(cbind,lapply(levels(Data_Neural_Net$ModeOfPayment), function(x){(Data_Neural_Net$ModeOfPayment ==x)*1}))) names(flags_ModeOfPayment) =levels(Data_Neural_Net$ModeOfPayment) Data_Neural_Net$CustomerPropensity &lt;-factor(Data_Neural_Net$CustomerPropensity) flags_CustomerPropensity =data.frame(Reduce(cbind,lapply(levels(Data_Neural_Net$CustomerPropensity), function(x){(Data_Neural_Net$CustomerPropensity ==x)*1}))) names(flags_CustomerPropensity) =levels(Data_Neural_Net$CustomerPropensity) cate &lt;-cbind(flags_ModeOfPayment,flags_CustomerPropensity) #Combine all data into single modeling data Dataset &lt;-cbind(dep,scaled_cont,cate); #Divide the data into train and test set.seed(917); index &lt;-sample(1:nrow(Dataset),round(0.7*nrow(Dataset))) train &lt;-Dataset[index,] test &lt;-Dataset[-index,] ##MODELING library(nnet) i &lt;-names(train) form &lt;-as.formula(paste(&quot;dep ~&quot;, paste(i[!i %in% &quot;dep&quot;], collapse =&quot; + &quot;))) # nn &lt;-nnet.formula(form,size=10,data=train) # save(nn, file=&quot;./save/nn.R&quot;) load(file=&quot;./save/nn.R&quot;) # Use 10 neuron in one hidden layer predict_class &lt;-predict(nn, newdata=test, type=&quot;class&quot;) table(test$dep,predict_class) ## predict_class ## 0 1 ## 0 28776 13863 ## 1 11964 19534 sum(diag(table(test$dep,predict_class))/nrow(test)) ## [1] 0.6516314 # misc rate : 65.1% qui est 1% de plus que logistic reg # neural net ameliore prediction sur 0 mais détérior sur 1 library(NeuralNetTools) ## Warning: package &#39;NeuralNetTools&#39; was built under R version 3.3.3 plotnet(nn) # Plot the importance olden(nn) garson(nn) Other information Main step for a neural network model : define model structure initialize model parameters loop calculate current loss (forward propagation) calculate current gradient (backward propagation) -update parameter (gradient descent) Type of neural network function : Perceptron Back propagation Hopfield Network Radia Basis Function Network (RBFN) RELU 7.3 Deep Learning Deep learning consists of advanced algorithms having multiple layers, composed of multiple linear and non-linear transformations There are multiple deep learning architectures : automatic speech recognition, NLP, audio recognition Deep neural network Convolution deep neural network (image recognition :2 dimentional data) deep belief (image et signal processing) recurrent neural network (time series data) recursive Neural network (langugage processing) In general, adding more layers and neurons per layer increases the specialization of neural network to train data and decreases the performance on test data: Overfitting and computational cost. However R is not yet developed enough tools to run various deep learning algorithms. Another reason for that is deep learning is so resource intensive that models can be trained only on large clusters and not on workstations. 7.3.1 Example of deep learning : Classification # continuous variable are scaled and categorical varibale converted into binary variables #install.packages(&quot;C:/Users/007/Desktop/Data science with R/R/darch_0.12.0.tar.gz&quot; , repos = NULL, type=&quot;source&quot;) library(darch) library(mlbench) library(RANN) #Print the model formula form ## dep ~ PurchaseTenure + CustomerAge + MembershipPoints + IncomeClass + ## BankTransfer + Cash + CashPoints + CreditCard + DebitCard + ## MoneyWallet + Voucher + High + Low + Medium + Unknown + VeryHigh ########### NOT Run TO long !!###### #Apply the model using deep neural net with # deep_net &lt;- darch(form, train, # preProc.params = list(&quot;method&quot; = c(&quot;knnImpute&quot;)), # layers = c(0,10,30,10,0), # darch.batchSize = 1, # darch.returnBestModel.validationErrorFactor = 1, # darch.fineTuneFunction = &quot;rpropagation&quot;, # darch.unitFunction = c(&quot;tanhUnit&quot;, &quot;tanhUnit&quot;,&quot;tanhUnit&quot;,&quot;softmaxUnit&quot;), # darch.numEpochs = 15, # bootstrap = T, # bootstrap.num = 500) # deep_net &lt;-darch(form,train, # preProc.params =list(method =c(&quot;center&quot;, &quot;scale&quot;)), # layers =c(0,10,30,10,0), # darch.unitFunction =c(&quot;sigmoidUnit&quot;, &quot;tanhUnit&quot;,&quot;tanhUnit&quot;,&quot;softmaxUnit&quot;), # darch.fineTuneFunction =&quot;minimizeClassifier&quot;, # darch.numEpochs =15, # cg.length =3, cg.switchLayers =5) # library(NeuralNetTools) #plot(deep_net,&quot;net&quot;) #result &lt;-darchTest(deep_net, newdata = test) #result 7.3.2 Example : Imagine prediction : NN classification # install.packages(&quot;drat&quot;, repos=&quot;https://cran.rstudio.com&quot;) # drat:::addRepo(&quot;dmlc&quot;) # cran &lt;- getOption(&quot;repos&quot;) # cran[&quot;dmlc&quot;] &lt;- &quot;https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/&quot; # options(repos = cran) # install.packages(&quot;mxnet&quot;) # install.packages(&quot;https://github.com/jeremiedb/mxnet_winbin/raw/master/mxnet.zip&quot;, repos = NULL) #Please refer https://github.com/dahtah/imager ##install.packages(&quot;devtools&quot;) #devtools::install_github(&quot;dahtah/imager&quot;) library(mxnet) ## Warning: package &#39;mxnet&#39; was built under R version 3.3.3 ## Loading required package: methods #install imager for loading images library(imager) ## Warning: package &#39;imager&#39; was built under R version 3.3.3 ## Loading required package: plyr ## Warning: package &#39;plyr&#39; was built under R version 3.3.3 ## ------------------------------------------------------------------------- ## You have loaded plyr after dplyr - this is likely to cause problems. ## If you need functions from both plyr and dplyr, please load plyr first, then dplyr: ## library(plyr); library(dplyr) ## ------------------------------------------------------------------------- ## ## Attaching package: &#39;plyr&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## arrange, count, desc, failwith, id, mutate, rename, summarise, ## summarize ## The following object is masked from &#39;package:purrr&#39;: ## ## compact ## Loading required package: magrittr ## Warning: package &#39;magrittr&#39; was built under R version 3.3.3 ## ## Attaching package: &#39;magrittr&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract ## ## Attaching package: &#39;imager&#39; ## The following object is masked from &#39;package:magrittr&#39;: ## ## add ## The following object is masked from &#39;package:plyr&#39;: ## ## liply ## The following object is masked from &#39;package:stringr&#39;: ## ## boundary ## The following object is masked from &#39;package:tidyr&#39;: ## ## fill ## The following objects are masked from &#39;package:stats&#39;: ## ## convolve, spectrum ## The following object is masked from &#39;package:graphics&#39;: ## ## frame ## The following object is masked from &#39;package:base&#39;: ## ## save.image library(drat) ## Warning: package &#39;drat&#39; was built under R version 3.3.3 #load the pre-trained model download.file(&#39;http://data.dmlc.ml/data/Inception.zip&#39;, destfile = &#39;Inception.zip&#39;) unzip(&quot;Inception.zip&quot;) model &lt;- mx.model.load(&quot;Inception/Inception_BN&quot;, iteration=39) #We also need to load in the mean image, which is used for preprocessing using mx.nd.load. mean.img = as.array(mx.nd.load(&quot;Inception/mean_224.nd&quot;)[[&quot;mean_img&quot;]]) #Load and plot the image: (Default parrot image) #im &lt;- load.image(system.file(&quot;extdata/parrots.png&quot;, package=&quot;imager&quot;)) #im &lt;-load.image(&quot;Images/russia-volcano.jpg&quot;) im = load.image(&quot;C:/Users/007/Desktop/Data science with R/R/Inception/fibrosarcome-chat.jpg&quot;) plot(im) preproc.image &lt;-function(im, mean.image) { # crop the image shape &lt;-dim(im) short.edge &lt;-min(shape[1:2]) xx &lt;-floor((shape[1] -short.edge) /2) yy &lt;-floor((shape[2] -short.edge) /2) cropped &lt;-crop.borders(im, xx, yy) # resize to 224 x 224, needed by input of the model. resized &lt;-resize(cropped, 224, 224) # convert to array (x, y, channel) arr &lt;-as.array(resized) *255 dim(arr) &lt;-c(224, 224, 3) # subtract the mean normed &lt;-arr -mean.img # Reshape to format needed by mxnet (width, height, channel, num) dim(normed) &lt;-c(224, 224, 3, 1) return(normed) } #Now pass our image to pre-process normed &lt;-preproc.image(im, mean.img) plot(normed) prob &lt;- predict(model, X=normed) #We can extract the top-5 class index. max.idx &lt;- order(prob[,1], decreasing = TRUE)[1:5] max.idx ## [1] 283 286 282 288 284 synsets &lt;-readLines(&quot;Inception/synset.txt&quot;) #And let us print the corresponding lines: print(paste0(&quot;Predicted Top-classes: &quot;, synsets[as.numeric(max.idx)])) ## [1] &quot;Predicted Top-classes: n02123159 tiger cat&quot; ## [2] &quot;Predicted Top-classes: n02124075 Egyptian cat&quot; ## [3] &quot;Predicted Top-classes: n02123045 tabby, tabby cat&quot; ## [4] &quot;Predicted Top-classes: n02127052 lynx, catamount&quot; ## [5] &quot;Predicted Top-classes: n02123394 Persian cat&quot; "]
]
